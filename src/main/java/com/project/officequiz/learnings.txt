Any exception throws inside loadUserByUserName will never reach Global Exception Handler as loadUserByUserName is
internally called by Spring.
Most of the Spring Security based exceptions can't directly be used with Global Exception Handler as Spring Security
based exceptions mostly comes from filter and Global Exception Handler(RestControllerAdvice) catches the controller exception

Spring Boot AuthenticationFilter Checks
Order of Checks in Spring Security Authentication
User Exists?

UserDetailsService loads the user by username.
If the user is not found, authentication fails immediately.
Is the Account Disabled? (isEnabled())

If the account is disabled, authentication fails before checking the password.
Is the Account Locked? (isAccountNonLocked())

If the account is locked, authentication fails.
Is the Account Expired? (isAccountNonExpired())

If the account is expired, authentication fails.
Are Credentials Expired? (isCredentialsNonExpired())

If the credentials (password) have expired, authentication fails.
Password Verification

Only after passing all previous checks, the password is verified.

Issue: If user account is disabled and user provided correct username and wrong password then user will get disabled
exception always. This is intended by design as making any user aware that specific attribute(here password is incorrect)
may lead to security issue and revealing the details of the system.

If we specific want to show Incorrect Credentials in case username/password is missing and showing account is disabled
when account is disabled. In case account is disabled and password is wrong, we want to show Incorrect password instead
of account is disabled then how to do it????
1) We have to provide our own custom filter implementation and replace it with UserNameAndPasswordFilter.
Reason is(assuming we have overridden the loadUserByUserName)::
Scenario where security user is returning user.isActive() and user is disabled.
1.1) If we add our custom filter before and then check for Disable logic then for disable case it will not work when
account is disabled but password is wrong because after our custom filter, UserNameAndPasswordFilter will be run which
will always check for disable first and if found will never check for Password.
1.2) If we add our custom filter later and then check for disable logic then also we will run into same issue.
UserNameAndPasswordFilter from spring security will be run, and it will not check as soon as disabled account is found.
Scenario where security user is returning true always
1.1) If we add our custom filter before and then check for disabled logic it will not work. Since loadUserByUserName
returns UserDetails and in our case SecurityUser is implementing UserDetails so UserDetails will always be true and
since it is true we will never be able to figure out if user is disabled or not.
1.2) Same scenario will come if we add our filter after UserNameAndPasswordFilter.

2) How to achieve it???
If we intend on overriding loadUserByUserName then we will have to ensure:
2.1) That it is being called from our custom filter only(i.e. replacing our filter with UserName one as mentioned above)
2.2) Ensuring securityUser isActive isn't hardcoded and should return user.isActive()
2.3) Write the custom logic for checking the password(check AccountStatusFilter class)
2.4) Set the error message in session object and carefully remove it as well.

RedirectAttributes is only used when we are redirecting to another page. If we are adding flash attribute then they
will be available for the current request only.

AuthenticationManager depends on AuthenticationConfiguration depends on UserManagementService.

For Form Data, RequestBody annotation will not work. ModelAttribute annotation will be required.
Use PRG(Post, Redirect,Get) Pattern so that resubmission of form doesn't take place.

